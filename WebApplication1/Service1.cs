//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.17929.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://localhost:8004/Service1.asmx")]
public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
    
    private System.Threading.SendOrPostCallback JustSleep1MinOperationCompleted;
    
    private System.Threading.SendOrPostCallback FlushAndSleep1MinOperationCompleted;
    
    private System.Threading.SendOrPostCallback NoFlushAndSleep1MinOperationCompleted;
    
    /// <remarks/>
    public Service1() {
        this.Url = "http://localhost:8004/Service1.asmx";
    }
    
    /// <remarks/>
    public event HelloWorldCompletedEventHandler HelloWorldCompleted;
    
    /// <remarks/>
    public event JustSleep1MinCompletedEventHandler JustSleep1MinCompleted;
    
    /// <remarks/>
    public event FlushAndSleep1MinCompletedEventHandler FlushAndSleep1MinCompleted;
    
    /// <remarks/>
    public event NoFlushAndSleep1MinCompletedEventHandler NoFlushAndSleep1MinCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8004/Service1.asmx/HelloWorld", RequestNamespace="http://localhost:8004/Service1.asmx", ResponseNamespace="http://localhost:8004/Service1.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string HelloWorld() {
        object[] results = this.Invoke("HelloWorld", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginHelloWorld(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("HelloWorld", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndHelloWorld(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void HelloWorldAsync() {
        this.HelloWorldAsync(null);
    }
    
    /// <remarks/>
    public void HelloWorldAsync(object userState) {
        if ((this.HelloWorldOperationCompleted == null)) {
            this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
        }
        this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
    }
    
    private void OnHelloWorldOperationCompleted(object arg) {
        if ((this.HelloWorldCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8004/Service1.asmx/JustSleep1Min", RequestNamespace="http://localhost:8004/Service1.asmx", ResponseNamespace="http://localhost:8004/Service1.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string JustSleep1Min() {
        object[] results = this.Invoke("JustSleep1Min", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginJustSleep1Min(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("JustSleep1Min", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndJustSleep1Min(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void JustSleep1MinAsync() {
        this.JustSleep1MinAsync(null);
    }
    
    /// <remarks/>
    public void JustSleep1MinAsync(object userState) {
        if ((this.JustSleep1MinOperationCompleted == null)) {
            this.JustSleep1MinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJustSleep1MinOperationCompleted);
        }
        this.InvokeAsync("JustSleep1Min", new object[0], this.JustSleep1MinOperationCompleted, userState);
    }
    
    private void OnJustSleep1MinOperationCompleted(object arg) {
        if ((this.JustSleep1MinCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.JustSleep1MinCompleted(this, new JustSleep1MinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8004/Service1.asmx/FlushAndSleep1Min", RequestNamespace="http://localhost:8004/Service1.asmx", ResponseNamespace="http://localhost:8004/Service1.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string FlushAndSleep1Min() {
        object[] results = this.Invoke("FlushAndSleep1Min", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFlushAndSleep1Min(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FlushAndSleep1Min", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndFlushAndSleep1Min(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void FlushAndSleep1MinAsync() {
        this.FlushAndSleep1MinAsync(null);
    }
    
    /// <remarks/>
    public void FlushAndSleep1MinAsync(object userState) {
        if ((this.FlushAndSleep1MinOperationCompleted == null)) {
            this.FlushAndSleep1MinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlushAndSleep1MinOperationCompleted);
        }
        this.InvokeAsync("FlushAndSleep1Min", new object[0], this.FlushAndSleep1MinOperationCompleted, userState);
    }
    
    private void OnFlushAndSleep1MinOperationCompleted(object arg) {
        if ((this.FlushAndSleep1MinCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FlushAndSleep1MinCompleted(this, new FlushAndSleep1MinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:8004/Service1.asmx/NoFlushAndSleep1Min", RequestNamespace="http://localhost:8004/Service1.asmx", ResponseNamespace="http://localhost:8004/Service1.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string NoFlushAndSleep1Min() {
        object[] results = this.Invoke("NoFlushAndSleep1Min", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginNoFlushAndSleep1Min(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("NoFlushAndSleep1Min", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndNoFlushAndSleep1Min(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void NoFlushAndSleep1MinAsync() {
        this.NoFlushAndSleep1MinAsync(null);
    }
    
    /// <remarks/>
    public void NoFlushAndSleep1MinAsync(object userState) {
        if ((this.NoFlushAndSleep1MinOperationCompleted == null)) {
            this.NoFlushAndSleep1MinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNoFlushAndSleep1MinOperationCompleted);
        }
        this.InvokeAsync("NoFlushAndSleep1Min", new object[0], this.NoFlushAndSleep1MinOperationCompleted, userState);
    }
    
    private void OnNoFlushAndSleep1MinOperationCompleted(object arg) {
        if ((this.NoFlushAndSleep1MinCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.NoFlushAndSleep1MinCompleted(this, new NoFlushAndSleep1MinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void JustSleep1MinCompletedEventHandler(object sender, JustSleep1MinCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class JustSleep1MinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal JustSleep1MinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void FlushAndSleep1MinCompletedEventHandler(object sender, FlushAndSleep1MinCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FlushAndSleep1MinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FlushAndSleep1MinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void NoFlushAndSleep1MinCompletedEventHandler(object sender, NoFlushAndSleep1MinCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class NoFlushAndSleep1MinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal NoFlushAndSleep1MinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
